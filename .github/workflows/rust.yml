name: Rust

permissions:
  contents: write

on:
  push:
    branches: ["ci", "main"]
  pull_request:
    branches: ["ci"]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    # environment: default
    needs:
      - test
    env:
      RUSTFLAGS: -C link-arg=-s

    steps:
      - uses: actions/checkout@v4
      - name: Install MUSL toolchain
        run: |
          sudo apt-get install -yqq --no-install-recommends build-essential
          sudo apt-get install -yqq musl-tools
          rustup target add x86_64-unknown-linux-musl
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: musl-cache
      - name: Build Release Binary
        run: cargo build --release --verbose --target x86_64-unknown-linux-musl
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cargo-build-release
          path: target/x86_64-unknown-linux-musl/release/

  build-docker:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    # environment: default
    needs: build-release
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: |
          echo "yo"

  test:
    runs-on: ubuntu-latest
    # environment: default

    steps:
      - uses: actions/checkout@v4
      - name: Install MUSL toolchain
        run: |
          sudo apt-get install -yqq --no-install-recommends build-essential
          sudo apt-get install -yqq musl-tools
          rustup target add x86_64-unknown-linux-musl
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: musl-cache
      - name: Build
        run: cargo build --verbose --target x86_64-unknown-linux-musl
      - name: Run tests
        run: cargo test --verbose --target x86_64-unknown-linux-musl
      # - name: Upload Build Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cargo-build-debug
      #     path: target/x86_64-unknown-linux-musl/debug/

  semantic_release:
    # This job runs on every push to 'main' branch after a successful build and test.
    if: github.ref == 'refs/heads/ci'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN}}
    environment: default
    needs: [test]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache
          restore-keys: |
            ${{ runner.os }}-npm-cache
      - name: Install Dependencies
        run: |
          npm install -g semantic-release \
            conventional-changelog-conventionalcommits \
            @semantic-release/commit-analyzer \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/exec \
            @semantic-release/changelog
      - name: Run Semantic Release
        run: npx semantic-release
